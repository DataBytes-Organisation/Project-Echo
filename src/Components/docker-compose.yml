version: "3.8"

services:
  model_server:
    build:
      context: ./Engine
      dockerfile: Model.Dockerfile
    image: ts-echo-model
    container_name: ts-echo-model-cont
    networks:
      - echo-net
    ports:
      - "8501:8501"
    volumes:
      - credentials_volume:/root/.config/gcloud/
    stdin_open: false
    tty: true
    environment:
      - SERVICE_URL=http://model_server:8501

  echo_triangulation:
    build:
      context: ClusteringTriangulation/
      dockerfile: Triangulation.Dockerfile
    image: ts-echo-triangulation
    container_name: ts-triangulation-cont
    networks:
      - echo-net
    volumes:
      - credentials_volume:/root/.config/gcloud/
      - recordings:/mnt/recordings

    stdin_open: true
    tty: true  

  echo_engine:
    build:
      context: ./Engine
      dockerfile: Engine.Dockerfile
    image: ts-echo-engine
    container_name: ts-echo-engine-cont
    networks:
      - echo-net
    volumes:
      - credentials_volume:/root/.config/gcloud/
    stdin_open: true
    tty: true
    environment:
      - SERVICE_URL=http://echo_engine:80


  echo_hmi:
    build:
      context: ./HMI
      dockerfile: HMI.Dockerfile
    image: ts-echo-hmi
    container_name: ts-echo-hmi-cont
    networks:
      - echo-net
    volumes:
      - ./HMI/ui:/usr/src/app/ui # Mount the HMI/ui directory to /usr/src/app/ui in the container
      - /usr/src/app/ui/node_modules
      - credentials_volume:/root/.config/gcloud/
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      - redis
    stdin_open: true
    tty: true
    environment:
      - NODE_ENV=development
      - SERVICE_URL=http://echo_hmi:8080



  echo_mqtt:
    build:
      context: ./MQTT-Server
      dockerfile: MQTT.Dockerfile
    image: ts-mqtt-server
    container_name: ts-mqtt-server-cont
    networks:
      - echo-net
    stdin_open: false
    tty: true
    ports:
      - "1883:1883"
      - "1884:1884"
      - "7001:7001"
      - "7070:7070"
    volumes:
      - ./MQTT-Server/config.xml:/opt/hivemq/conf/config.xml
    environment:
      - SERVICE_URL=http://echo_mqtt:1883

  echo_simulator:
    build:
      context: ./Simulator
      dockerfile: Simulator.Dockerfile
    image: ts-simulator
    container_name: ts-simulator-cont
    networks:
      - echo-net
    volumes:
      - ./Simulator/src:/app # Mount the Simulator's src directory to /app in the container
      - credentials_volume:/root/.config/gcloud/
    stdin_open: false
    tty: true
    environment:
      - SERVICE_URL=http://echo_simulator:80



  echo_api:
    build:
      context: ./API
      dockerfile: API.Dockerfile
    image: ts-api
    container_name: ts-api-cont
    networks:
      - echo-net
    ports:
      - "9000:9000"
      - "9080:9080"
    volumes:
      - ./API:/app # Mount the API's src directory to /app in the container
      - credentials_volume:/root/.config/gcloud/
      - recordings:/mnt/recordings
    stdin_open: false
    tty: true
    command: uvicorn app.main:app --host 0.0.0.0 --port 9000 --reload
    environment:
      - SERVICE_URL=http://echo_api:9000

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8888:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: ts-mongodb-cont
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root_password
    depends_on:
      - echo_store
    networks:
      - echo-net

  
  echo_store:
    build:
      context: MongoDB/
      dockerfile: MongoDB.Dockerfile
    restart: always
    image: ts-mongodb
    container_name: ts-mongodb-cont
    networks:
      - echo-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root_password
      MONGO_INITDB_DATABASE: EchoNet
    ports:
      - "27017:27017"
    volumes:
      - db-data:/data/db

  redis:
    image: redis:latest
    container_name: echo-redis
    ports:
      - "6379:6379"
    networks:
      - echo-net
    command: "sh -c 'redis-server --protected-mode no && sleep 10 && redis-cli ping || exit 1'"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    environment:
      - SERVICE_URL=http://redis:6379

  echo_onset:
    build:
        context: OnsetDetection/
        dockerfile: OnsetDetection.Dockerfile
    image: ts-echo-onset
    container_name: ts-onset-cont
    networks:
      - echo-net
    volumes:
      - credentials_volume:/root/.config/gcloud/
      - recordings:/mnt/recordings
    stdin_open: true
    tty: true

  echo_clustering:
    build:
        context: Clustering/
        dockerfile: Clustering.Dockerfile
    image: ts-echo-clustering
    container_name: ts-clustering-cont
    networks:
      - echo-net
    volumes:
      - credentials_volume:/root/.config/gcloud/
      - recordings:/mnt/recordings
    stdin_open: true
    tty: true

  initializer:
    image: busybox
    volumes:
      - recordings:/mnt/recordings
    command: ["sh", "-c", "mkdir -p /mnt/recordings/pre-processed /mnt/recordings/onset /mnt/recordings/onset/spectrograms /mnt/recordings/onset/audio /mnt/recordings/clusters /mnt/recordings/clusters/1 /mnt/recordings/clusters/2 /mnt/recordings/clusters/3 "]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
 

networks:
  echo-net:
    driver: bridge

volumes:
  credentials_volume:
  db-data:
  recordings:

